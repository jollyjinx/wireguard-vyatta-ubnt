multi:
type: txt
help: IP addresses allowed to traverse the peer
val_help: <x.x.x.x/x | h:h:h:h:h:h:h:h>[,x.x.x.x/x | h:h:h:h:h:h:h:h]...; Comma separated list of IP addresses to allow

begin:
        date -R >> /tmp/wg.log; echo "wireguard/peer/node.tag/allowed-ips/node.def: begin: action: $COMMIT_ACTION arg: $VAR(@)" >> /tmp/wg.log
        
delete:
    date -R >> /tmp/wg.log; echo "wireguard/peer/node.tag/allowed-ips/node.def: delete: action: $COMMIT_ACTION arg: $VAR(@)" >> /tmp/wg.log
    if [ "$VAR(../../route-allowed-ips/@)" == "true" ];
    then
    date -R >> /tmp/wg.log; echo "wireguard/peer/node.tag/allowed-ips/node.def: delete: $VAR(@) true " >> /tmp/wg.log
        ips="$VAR(@)"
        for ip in ${ips//,/ };
        do
            date -R >> /tmp/wg.log; echo "wireguard/peer/node.tag/allowed-ips/node.def: delete: ip: $ip from $VAR(../../@)" >> /tmp/wg.log
            sudo ip route del "$ip" dev "$VAR(../../@)" 2> /dev/null
        done
    fi
    date -R >> /tmp/wg.log; echo "wireguard/peer/node.tag/allowed-ips/node.def: finished " >> /tmp/wg.log


syntax:expression: exec "ips=$VAR(@); for ip in ${ips//,/ }; do /opt/vyatta/sbin/vyatta-find-type.pl $ip ipv4net ipv4 ipv6net ipv6 > /dev/null; done || exit 1";
                   "Value must contain valid IP addresses"

